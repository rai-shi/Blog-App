user/register POST
{
    "username": "raishi",
    "first_name": "ayse",
    "last_name": "tak",
    "email": "ayse1@gmail.com",
    "password": "930615Fly",
    "profile":{
        "bio":"ai enthusiast",
        "categories":[1,2,4,5]
    }
}

user/login POST
{
    "username": "justin_lee",
    "password": "930615Fly"
}

user/logout GET
user/me GET
user/me DELETE

user/my-blogs GET (get user's all blogs)

user/my-blogs/new-story/ POST
data-1
{
    "title":"Elasticsearh Nedir?",
    "description": "Lorem ipsum dolor sit amet",
    "content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam eu maximus urna, eu dapibus tortor. In hac habitasse platea dictumst. Fusce sagittis vestibulum tristique. Nunc hendrerit dolor est, sed euismod velit blandit vitae. Duis accumsan eget tortor sit amet aliquet. Integer et magna enim. Aenean egestas orci vel turpis suscipit egestas. Morbi vestibulum tempor viverra. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis at enim ac metus sodales auctor ut sit amet risus. Nunc imperdiet nec felis ullamcorper laoreet. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Nulla rhoncus augue a massa maximus, quis facilisis lectus dignissim. Praesent molestie lacus eget tortor semper, id eleifend urna hendrerit. Nam vel blandit mi, at feugiat ex.",
    "categories":[1,2]
}
data-2
{
    "title":"Lorem Ipsum Nedir?",
    "description": "Quisque eu est sit amet lorem auctor dignissim!",
    "content":"Quisque eu est sit amet lorem auctor dignissim. In est nibh, hendrerit in neque scelerisque, dictum tincidunt justo. Etiam sed aliquam risus, eget vehicula sapien. Morbi gravida in libero ac convallis. Nam a dapibus ligula, tincidunt euismod dolor. Duis posuere porttitor est ut dignissim. Duis non molestie turpis.",
    "categories":[1,2,4]
}

user/my-blogs/slug PUT 
categories, description, title, content can update
{
"categories":[3],
"description":"Elasticsearch nedir hakkında güzel bir makale."
}

user/my-blogs/slug GET
user/my-blogs/slug DELETE



/blogs GET (get all blogs)
/blogs/slug GET 
/blogs/slug/comment GET POST    
{
    "comment":"first comment"
}
/blogs/slug/comment/id GET DELETE 

/blogs/slug/like POST DELETE
 

http://127.0.0.1:8000/search/users/?user=anonymous fullname username
http://127.0.0.1:8000/search/users/?username=dominik_felix username spesific match 
http://127.0.0.1:8000/search/users/?category=nlp
http://127.0.0.1:8000/search/users/?user-blogs=justin_lee

http://127.0.0.1:8000/search/blogs/
http://127.0.0.1:8000/search/blogs/?keyword=artificial title, description, content


/search/blogs/?keyword=raishi GET


blogs/category/ GET, POST
{
    "name" : "tech"
}



list indices
curl -X GET "http://localhost:9200/_cat/indices?v"

view user_index mapping
curl -X GET "http://localhost:9200/user_index/_mapping?pretty"

delete blog index
curl -X DELETE http://localhost:9200/blog_index

view user index all data
curl -X GET "http://localhost:9200/user_index/_search?pretty" -H "Content-Type: application/json" -d '{
    "query": {
        "multi_match": {
            "query" : "justin_lee",
            "fields" : ["username"]
        }
    }
}'
curl -X GET "http://localhost:9200/user_index/_search?pretty" -H "Content-Type: application/json" -d '{
    "query": {
        "multi_match": {
            "query" : "nikhil",         
            "fields" : ["username"]
        }
    }
}'



delete user index datas
curl -X POST "http://localhost:9200/user_index/_delete_by_query" -H "Content-Type: application/json" -d '{
  "query": {
    "match_all": {}
  }
}'

delete blog index datas
curl -X POST "http://localhost:9200/blog_index/_delete_by_query" -H "Content-Type: application/json" -d '{
  "query": {
    "match_all": {}
  }
}'





elasticsearch

user_index
    first_name
    last_name
    full_name
    username
    profile { inner object}
        bio
        categories

blog_index
    title
    description
    content 
    created_at
    author { inner object }
        id 
        username 
        full_name
    categories
    comment_count
    like_count
    comment_index {nested object}
        content 
        user { inner object }
            id
            username 

category_index   
    name 


user profile 1-1
    inner object 
user blog 1-N
    // blog altına author_id böylece application side tanımlanmış oldu
    inner object 
user category N-N 
    parent child

blog category N-N 
    parent child 


blog comment 1-N
    nested object






user_index
    first_name
    last_name
    full_name
    username
    profile { inner object}
        bio
        categories { denormalized }

blog_index
    title
    description
    content 
    created_at
    author_id { application side approach will be used}
    author_username { application side approach will be used}
    comment_count
    like_count
    comment_index { nested object }
        content 
        user { inner object }
            id
            username 
    categories { nested object }
        id 
        name 

